
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
  id 'java-library'
  id 'maven'
  id 'jacoco'
  id 'eclipse'
  id 'idea'
}


group 'io.mrs'
version '1.0-SNAPSHOT'

repositories {
  jcenter()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

ext {
  logging_log4j_version='2.12.1'
  selenium_version='3.141.59'
  junit_version='5.7.0'
  junit_platform_runner_version='1.7.0'
  assertj_core_version='3.16.1'
  commons_io_version='2.7'
  commons_lang_version='3.11'
  javafaker_version='1.0.2'
  webdrivermanager_version='4.2.0'
  gson_version='2.8.6'

  selenide_version='5.14.1'
  httpclient_version='4.5.12'

  screenshotDirectory="${buildDir}/screenshots"

  browser='chrome'
  headless=false
}

dependencies {
  // This dependency is exported to consumers, that is to say found on their compile classpath.
  compile "org.assertj:assertj-core:${assertj_core_version}"
  compile "com.github.javafaker:javafaker:${javafaker_version}"
  compile(platform("org.junit:junit-bom:${junit_version}"))
  testRuntime("org.junit.platform:junit-platform-runner:${junit_platform_runner_version}")
  compile('org.junit.jupiter:junit-jupiter')
  
  compile("org.junit.jupiter:junit-jupiter-params:${junit_version}")
  
  // https://mvnrepository.com/artifact/org.easetech/easytest-core
  compile "org.easetech:easytest-core:1.4.0"
  
  compile "org.seleniumhq.selenium:selenium-java:${selenium_version}"
  compile "io.github.bonigarcia:webdrivermanager:${webdrivermanager_version}"
  compile "com.codeborne:selenide:${selenide_version}"

  compile "org.apache.logging.log4j:log4j-core:${logging_log4j_version}"
  compile "org.apache.logging.log4j:log4j-slf4j-impl:${logging_log4j_version}"
  
  compile "commons-io:commons-io:${commons_io_version}"
  compile "org.apache.commons:commons-lang3:${commons_lang_version}"

  compile "com.google.code.gson:gson:${gson_version}"
  compile "org.apache.httpcomponents:httpclient:${httpclient_version}"

}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

test {
  dependsOn cleanTest

  useJUnitPlatform() {
    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/testng/TestNGOptions.html
    environment 'FUNCTIONAL_ENV', System.getProperty('functional.env', 'uscald')

    systemProperty 'browser', System.getProperty('browser', "${browser}")
    systemProperty 'headless', System.getProperty('headless', "${headless}")
    systemProperty 'screenshotDirectory', System.getProperty('screenshotDirectory', "${screenshotDirectory}")
    systemProperty 'baseurl', System.getProperty('baseurl', 'https://www.google.com')
    
    //display the following test events
    testLogging {
      showStandardStreams true
      events "PASSED", "FAILED", "SKIPPED"
    }
  }

  jacoco {
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpDir = file("$buildDir/jacoco/classpathdumps")
  }
}

jacoco {
  toolVersion "0.8.5"
  reportsDir file("$buildDir/reports/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
    html.destination file("${buildDir}/reports/jacoco/html")
  }
}

// found here: http://jdpgrailsdev.github.io/blog/2014/10/28/gradle_resolve_all_dependencies.html
task resolveDependencies {
  doLast {
    project.rootProject.allprojects.each { subProject ->
      subProject.buildscript.configurations.each { configuration ->
        resolveConfiguration(configuration)
      }
      subProject.configurations.each { configuration ->
        resolveConfiguration(configuration)
      }
    }
  }
}

void resolveConfiguration(configuration) {
  if (isResolveableConfiguration(configuration)) {
    configuration.resolve()
  }
}

boolean isResolveableConfiguration(configuration) {
  def nonResolveableConfigurations = ['apiElements', 'implementation',
    'runtimeElements', 'runtimeOnly',
    'testImplementation', 'testRuntimeOnly',
    'generatedImplementation', 'generatedRuntimeOnly']

  if (nonResolveableConfigurations.contains(configuration.getName())) {
    return false
  }
  return true
}

